specVersion: 0.0.2
description: Orchard Swap is a decentralized protocol for index fund tokens.
repository: https://github.com/Orchardfindex/orchard-subgraph.git
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum/contract
    name: DmmFactory
    network: mumbai
    source:
      address: '0xB61271d05D13A29e6379E18D533f6c1B110d46Db'
      abi: DmmFactory
      startBlock: 14376251  # contract creation block
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/factory.ts
      entities:   # defines which entities are written to stores
        - Pairs
        - Pools
        - Tokens
      abis:
        - name: DmmFactory
          file: ./abis/DmmFactory.json
        - name: ERC20
          file: ./abis/ERC20.json
        - name: ERC20SymbolBytes
          file: ./abis/ERC20SymbolBytes.json
        - name: ERC20NameBytes
          file: ./abis/ERC20NameBytes.json
      eventHandlers:
        - event: PoolCreated(indexed address,indexed address,address,uint32,uint256)
          handler: handlePoolCreated
        - event: SetFeeConfiguration(address,uint16)
          handler: handleSetFeeConfiguration
  - kind: ethereum/contract
    name: KyberRewardLocker
    network: mumbai
    source:
      address: '0x467e5df4fccb44af4c5904f7eafb94e3503bd391'
      abi: KyberRewardLocker
      startBlock: 15656941  # contract creation block
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/rewardLocker.ts
      entities:   # defines which entities are written to stores
        - RewardLockers
      abis:
        - name: KyberRewardLocker
          file: ./abis/KyberRewardLocker.json
        - name: KyberFairLaunch
          file: ./abis/KyberFairLaunch.json
      eventHandlers:
        - event: RewardContractAdded(indexed address,indexed address,bool)
          handler: handleRewardContractAdded
        - event: Vested(indexed address,indexed address,uint256,uint256)
          handler: handleVestd
templates:
  - kind: ethereum/contract
    name: Pool
    network: mumbai
    source:
      abi: Pool
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/core.ts
      entities:
        - Pool
        - Token
      abis:
        - name: Pool
          file: ./abis/DmmPool.json
        - name: Factory
          file: ./abis/DmmFactory.json
      eventHandlers:
        - event: Mint(indexed address,uint256,uint256)
          handler: handleMint
        - event: Burn(indexed address,uint256,uint256,indexed address)
          handler: handleBurn
        - event: Swap(indexed address,uint256,uint256,uint256,uint256,indexed address,uint256)
          handler: handleSwap
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransfer
        - event: Sync(uint256,uint256,uint256,uint256)
          handler: handleSync
  - kind: ethereum/contract
    name: KyberFairLaunch
    network: mumbai
    source:
      abi: KyberFairLaunch
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      file: ./src/mappings/fairLaunch.ts
      entities:
        - Pool
        - Token
      abis:
        - name: KyberFairLaunch
          file: ./abis/KyberFairLaunch.json
      eventHandlers:
        - event: Deposit(indexed address,indexed uint256,indexed uint256,uint256)
          handler: handleDeposit
        - event: Harvest(indexed address,indexed uint256,indexed address,uint256,uint256)
          handler: handleHarvest
        - event: Withdraw(indexed address,indexed uint256,indexed uint256,uint256)
          handler: handleWithdraw
        - event: AddNewPool(indexed address,indexed uint32,indexed uint32,uint256[])
          handler: handleAddNewPool
